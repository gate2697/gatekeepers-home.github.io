var canvas = document.getElementById("canvas"),
      ctx = canvas.getContext('2d');
    var colorIndex = 0; // Index for cycling through colors
    var colorChangeSpeed = 0.1; // Speed of color change
    var lineColorInterval; // Interval for updating line color
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    var clock = document.getElementById("clock");
var chance = document.getElementById("chance");
function clockrun() {
var e = new Date(new Date().toLocaleString("en-US", {timeZone: "America/New_York"}));;
if (e.getSeconds() < 10) {var secondsclock = "0" + e.getSeconds();} else {var secondsclock = e.getSeconds();}
if (e.getMinutes() < 10) {var Minutesclock = "0" + e.getMinutes();} else {var Minutesclock = e.getMinutes();}
if (e.getHours() === 0) {var Hoursclock = 12;var amorpm = "am";} else if (e.getHours() > 12) {var Hoursclock = e.getHours() - 12;var amorpm = "pm";} else {if (e.getHours() < 10) {var Hoursclock = "0" + e.getHours();} else {var Hoursclock = e.getHours();}var amorpm = "am";}
clock.innerHTML = Hoursclock + ":" + Minutesclock + ":" + secondsclock + "    " + amorpm;
if (amorpm == "pm") {
clock.classList.add("night");
clock.classList.remove("day");
} else {
clock.classList.add("day");
clock.classList.remove("night");
}
requestAnimationFrame(clockrun);
}
var me = document.getElementById("me");
var colorIndex = 0;
    var colorChangeSpeed = 1.5;
    var normalSpeed = 0.3;
    var boostedSpeed = 25;
    var boostDuration = 100; // Duration of boost in milliseconds
    var boostInterval = 10; // Interval in milliseconds to check for boost chance
    var boostChance = 0.005; // 20% chance of triggering boost
    var isBoosted = false; // Track if boost is active
canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    var star = 0;
    var stars = [];
    var FPS = 90;
    var totalStars = 100;
    var mouse = { x: 0, y: 0 };

    const hiddenMenu = document.getElementById('hiddenMenu');
  const sequence = [9, 7, 9, 5];
  let position = 0;

  document.addEventListener('keydown', (event) => {
    const key = parseInt(event.key, 10);
    if (key === sequence[position]) {
      position++;
      if (position === sequence.length) {
        hiddenMenu.style.display = 'flex'; // Show the hidden menu
        position = 0; // Reset for future access
      }
    } else {
      position = 0; // Reset if wrong key is pressed
    }
  });
     // Function to gradually add stars
     function addStar() {
      star = star + 1;
      if (star < totalStars) {
        stars.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          radius: 3,
          vx: Math.floor(Math.random() * 50) - 25,
          vy: Math.floor(Math.random() * 50) - 25
        });
        setTimeout(addStar, 100); // Add a star every 300ms
      } else {
      }
    }
    function startSpeedBoost() {
      setInterval(() => {
        if (Math.random() < boostChance && !isBoosted) {
          colorChangeSpeed = boostedSpeed;
          isBoosted = true;
          setTimeout(() => {
            colorChangeSpeed = 0.3; // Return to normal speed
            isBoosted = false;
          }, boostDuration);
        }
      }, boostInterval);
    }

    // Draw the scene
    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.globalCompositeOperation = "lighter";

      for (var i = 0, x = stars.length; i < x; i++) {
        var s = stars[i];
        ctx.fillStyle = "#fff";
        ctx.beginPath();
        ctx.arc(s.x, s.y, s.radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.fillStyle = 'black';
        ctx.stroke();
      }

      ctx.beginPath();
      for (var i = 0, x = stars.length; i < x; i++) {
        var starI = stars[i];
        ctx.moveTo(starI.x, starI.y);
        if (distance(mouse, starI) < 150) ctx.lineTo(mouse.x, mouse.y);
        for (var j = 0, x = stars.length; j < x; j++) {
          var starII = stars[j];
          if (distance(starI, starII) < 150) {
            ctx.lineTo(starII.x, starII.y);
          }
        }
      }

      // Update line color
      var colors = generateColors(300); // Generate an array of colors
      colorIndex += colorChangeSpeed;
      if (colorIndex >= colors.length) colorIndex = 0; // Loop back to the beginning
      ctx.lineWidth = 2;
      document.querySelectorAll('.me').forEach(function(el) {
        el.style.color = colors[Math.floor(colorIndex)];
      });
      ctx.strokeStyle = colors[Math.floor(colorIndex)];
      ctx.stroke();
    }

    function generateColors(count) {
      var colors = [];
      for (var i = 0; i < count; i++) {
        var hue = (i / count) * 360;
        colors.push(`hsl(${hue}, 100%, 50%)`);
      }
      return colors;
    }

    function distance(point1, point2) {
      var xs = 0;
      var ys = 0;
      xs = point2.x - point1.x;
      xs = xs * xs;
      ys = point2.y - point1.y;
      ys = ys * ys;
      return Math.sqrt(xs + ys);
    }

    // Update star locations
    function update() {
      for (var i = 0, x = stars.length; i < x; i++) {
        var s = stars[i];
        s.x += s.vx / FPS;
        s.y += s.vy / FPS;
        if (s.x < 0 || s.x > canvas.width) s.vx = -s.vx;
        if (s.y < 0 || s.y > canvas.height) s.vy = -s.vy;
      }
    }

    canvas.addEventListener('mousemove', function (e) {
      mouse.x = e.clientX;
      mouse.y = e.clientY;
    });

    // Update and draw
    function tick() {
      draw();
      update();
      requestAnimationFrame(tick);
    }

    function devToolsOpened(e){
    window.close()
    // uncomment to prevent opening dev.tools:
    // e.preventDefault();
}

$('body').keydown(function(e) {
    if(e.which == 123) {  // F12
        e.preventDefault();
        window.close();
    }
    if(e.ctrlKey && e.shiftKey && e.which == 73) {  // Ctrl + Shift + I
        e.preventDefault();
        window.close();
    }
    if(e.ctrlKey && e.shiftKey && e.which == 75) {  // Ctrl + Shift + K
        e.preventDefault();
        window.close();
    }
    if(e.ctrlKey && e.shiftKey && e.which == 67) {  // Ctrl + Shift + C
        e.preventDefault();
        window.close();
    }
    if(e.ctrlKey && e.shiftKey && e.which == 74) {  // Ctrl + Shift + J
        e.preventDefault();
        window.close();
    }
});

(function() {
    function detectDevTool(allow) {
        if(isNaN(+allow)) allow = 100;
        var start = +new Date();
        location = "google.com"
        debugger;
        var end = +new Date();

        if(isNaN(start) || isNaN(end) || end - start > allow) {
            window.close();  // Close window if dev tools are detected
        }
    }

    if(window.attachEvent) {
        if (document.readyState === "complete" || document.readyState === "interactive") {
            detectDevTool();
            window.attachEvent('onresize', detectDevTool);
            window.attachEvent('onmousemove', detectDevTool);
            window.attachEvent('onfocus', detectDevTool);
            window.attachEvent('onblur', detectDevTool);
        } else {
            setTimeout(arguments.callee, 0);
        }
    } else {
        window.addEventListener('load', detectDevTool);
        window.addEventListener('resize', detectDevTool);
        window.addEventListener('mousemove', detectDevTool);
        window.addEventListener('focus', detectDevTool);
        window.addEventListener('blur', detectDevTool);
    }
})();

const contactButton = document.getElementById('contactButton');
    const form2 = document.getElementById('form2');
    
    contactButton.addEventListener('click', () => {
      form2.style.display = 'block'; // Show the form
    });

    // Hide form2 when clicking outside
    document.addEventListener('click', (event) => {
      if (!form2.contains(event.target) && event.target !== contactButton) {
        form2.style.display = 'none'; // Hide the form if clicking outside
      }
    });

    tick();


    // Start adding stars over time
    addStar();

    // Start the animation loop
    clockrun();

    startSpeedBoost();

  </script>
   <script>
    document.getElementById('generateCodeBtn').addEventListener('click', async () => {
        const response = await fetch('/generate-code');
        const data = await response.json();
        document.getElementById('codeDisplay').textContent = data.code;
    });

    document.getElementById('validateCodeBtn').addEventListener('click', async () => {
        const code = document.getElementById('codeInput').value;
        const response = await fetch('/validate-code', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ code })
        });
        const data = await response.json();
        document.getElementById('validationResult').textContent = data.message;
    });